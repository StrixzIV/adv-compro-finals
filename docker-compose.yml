services:

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - ./server.json:/pgadmin4/servers.json
    ports:
      - "5050:80"
    networks:
      - backend_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runtime
    container_name: frontend_app
    ports:
      - "3000:3000"
    networks:
      - backend_network
    restart: unless-stopped
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./backend/src:/var/backend/src:rw
      - ./backend/tools:/var/backend/tools:ro
    depends_on:
      - db
    networks:
      - backend_network
    develop:
      watch:
        - action: rebuild
          path: backend/src/pyproject.toml


  # nextjs:
  #   build:
  #     context: ./nextjs
  #   ports:
  #     - "3000:3000"
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./nextjs:/src
  #     - /src/node_modules # This masks the node_modules directory from the host system and prevents it from being mapped from your local filesystem. The container will manage its own node_modules directory.
  #   working_dir: /src
  #   command: npm run dev
  #   networks:
  #     - backend_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data
      o: bind

networks:
  backend_network:
    driver: bridge
